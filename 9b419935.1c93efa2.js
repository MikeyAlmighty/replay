(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{153:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return c}));var i=n(1),r=n(9),o=(n(0),n(218)),a={},s={id:"tutorial/15",title:"15",description:"# 15 - Collision Detection",source:"@site/docs/tutorial/15.md",permalink:"/docs/tutorial/15",editUrl:"https://github.com/edbentley/replay/edit/master/website/docs/tutorial/15.md"},p=[],d={rightToc:p};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"15---collision-detection"},"15 - Collision Detection"),Object(o.b)("p",null,"Next we need to add some collision detection to see if the bird hit a pipe or fell off the bottom of the screen."),Object(o.b)("p",null,"We'll add a callback prop ",Object(o.b)("inlineCode",{parentName:"p"},"gameOver")," in the ",Object(o.b)("inlineCode",{parentName:"p"},"Level")," Sprite which can return us to the main menu. Then in the ",Object(o.b)("inlineCode",{parentName:"p"},"loop")," method we call it when the ",Object(o.b)("inlineCode",{parentName:"p"},"didHitPipe")," function returns ",Object(o.b)("inlineCode",{parentName:"p"},"true"),"."),Object(o.b)("p",null,"In Replay one way of performing collision detection is by checking if a point is within a rectangle, like the ",Object(o.b)("inlineCode",{parentName:"p"},"pointInRect")," function defined at the bottom of the ",Object(o.b)("inlineCode",{parentName:"p"},"level")," file does."),Object(o.b)("p",null,"In ",Object(o.b)("inlineCode",{parentName:"p"},"didHitPipe")," we essentially choose a few points around the shape of the bird, and see if any of those are inside one of the pipe rectangles - if so, it's a hit! For simplicity, this function doesn't account for the bird's rotation; as an exercise, feel free to try to add that for a more accurate hit detection."),Object(o.b)("p",null,"We update our top-level ",Object(o.b)("inlineCode",{parentName:"p"},"Game")," Sprite to change its view state to ",Object(o.b)("inlineCode",{parentName:"p"},'"menu"')," in the ",Object(o.b)("inlineCode",{parentName:"p"},"gameOver")," callback prop."),Object(o.b)("p",null,"You'll also see an ",Object(o.b)("inlineCode",{parentName:"p"},"attempt")," count added in the state. Even though we don't display this, it's a neat hack to force the ",Object(o.b)("inlineCode",{parentName:"p"},"Level")," to reset its state whenever we start again by changing its ",Object(o.b)("inlineCode",{parentName:"p"},"id")," prop. Replay uses the ",Object(o.b)("inlineCode",{parentName:"p"},"id")," to track state between Sprites (which is why it has to be unique locally), but we can also use that to reset a Sprite's state."))}c.isMDXComponent=!0},197:function(e,t,n){"use strict";n.r(t);var i=n(0),r=n.n(i),o=n(219),a=(n(52),n(217)),s=n(235),p=Object(a.a)({render:function(){return[a.b.rectangle({width:50,height:40,color:"yellow"})]}});function d(e){return"keysDown"in e}var c=Object(a.a)({render:function(e){var t=e.props,n=l(e.device.size,t.pipe.gapY),i=n.yUpperTop,r=n.yUpperBottom,o=n.yLowerTop,s=n.yLowerBottom;return[a.b.rectangle({color:"green",width:40,height:i-r,position:{x:0,y:(i+r)/2}}),a.b.rectangle({color:"green",width:40,height:o-s,position:{x:0,y:(o+s)/2}})]}});function l(e,t){return{yUpperTop:e.height/2+e.heightMargin,yUpperBottom:t+85,yLowerTop:t-85,yLowerBottom:-e.height/2-e.heightMargin}}var h=Object(a.a)({init:function(e){var t=e.device;return{birdY:10,birdGravity:-12,pipes:e.props.paused?[]:[u(t)]}},loop:function(e){var t=e.props,n=e.state,i=e.device;if(t.paused)return n;var r=i.inputs,o=n.birdGravity,a=n.birdY,p=n.pipes;return a-=o+=.8,(r.pointer.justPressed||d(r)&&r.keysJustPressed[" "])&&(o=-12),p[p.length-1].x<140&&(p=[].concat(p,[u(i)]).filter((function(e){return e.x>-(i.size.width+i.size.widthMargin+40)}))),function(e,t,n){if(e-20<-(t.height/2+t.heightMargin)||e+20>t.height/2+t.heightMargin)return!0;for(var i,r=function(){var n=i.value;if(n.x>45||n.x<-45)return"continue";var r=l(t,n.gapY),o=r.yUpperTop,a=r.yUpperBottom,s=r.yLowerTop,p=r.yLowerBottom,d={x:n.x,y:(o+a)/2,width:40,height:o-a},c={x:n.x,y:(s+p)/2,width:40,height:s-p};return[{x:25,y:e+20},{x:25,y:e-20},{x:0,y:e+20},{x:0,y:e-20},{x:-25,y:e+20},{x:-25,y:e-20}].some((function(e){return m(e,d)||m(e,c)}))?{v:!0}:void 0},o=Object(s.a)(n);!(i=o()).done;){var a=r();switch(a){case"continue":continue;default:if("object"==typeof a)return a.v}}return!1}(a,i.size,p)&&t.gameOver(),{birdGravity:o,birdY:a,pipes:p=p.map((function(e){var t=e.passed;return!t&&e.x<-45&&(t=!0),Object.assign(Object.assign({},e),{},{passed:t,x:e.x-2})}))}},render:function(e){var t=e.state,n=e.device.size;return[a.b.rectangle({color:"#add8e6",width:n.width+2*n.widthMargin,height:n.height+2*n.heightMargin}),p({id:"bird",position:{x:0,y:t.birdY,rotation:Math.max(-30,3*t.birdGravity-30)}})].concat(t.pipes.map((function(e,t){return c({id:"pipe-"+t,pipe:e,position:{x:e.x,y:0}})})))}});function u(e){var t=(e.size.height+2*e.size.heightMargin-340)*(e.random()-.5);return{x:e.size.width+e.size.widthMargin+50,gapY:t,passed:!1}}function m(e,t){return e.x>t.x-t.width/2&&e.x<t.x+t.width/2&&e.y>t.y-t.height/2&&e.y<t.y+t.height/2}var g=Object(a.a)({render:function(e){var t=e.props,n=e.device.inputs;return(n.pointer.justReleased||d(n)&&n.keysJustPressed[" "])&&t.start(),[a.b.text({text:d(n)?"Click or Space Bar to Start":"Tap to Start",color:"white",position:{x:0,y:100}})]}}),f=Object(a.a)({init:function(){return{view:"menu",attempt:0}},render:function(e){var t=e.state,n=e.updateState,i="menu"===t.view;return[h({id:"level-"+t.attempt,paused:i,gameOver:function(){n((function(e){return Object.assign(Object.assign({},e),{},{view:"menu"})}))}}),i?g({id:"menu",start:function(){n((function(e){return Object.assign(Object.assign({},e),{},{view:"level",attempt:e.attempt+1})}))}}):null]}}),v={id:"Game",size:{width:400,height:600,maxHeightMargin:150},defaultFont:{name:"Helvetica",size:24}},b=n(153);t.default=function(){return r.a.createElement(o.a,{part:15,MDXContent:b.default,codesTs:[{file:"level.ts",code:'import { makeSprite, t, Device, DeviceSize } from "@replay/core";\nimport { WebInputs } from "@replay/web";\nimport { iOSInputs } from "@replay/swift";\nimport { Bird, birdWidth, birdHeight } from "./bird";\nimport { isWebInput } from "./utils";\nimport { Pipe, PipeT, pipeWidth, pipeGap, getPipeYPositions } from "./pipe";\n\nconst speedX = 2;\nconst birdX = 0;\n\ntype LevelProps = {\n  paused: boolean;\n  gameOver: () => void;\n};\n\ntype LevelState = {\n  birdY: number;\n  birdGravity: number;\n  pipes: PipeT[];\n};\n\nexport const Level = makeSprite<LevelProps, LevelState, WebInputs | iOSInputs>({\n  init({ device, props }) {\n    return {\n      birdY: 10,\n      birdGravity: -12,\n      pipes: props.paused ? [] : [newPipe(device)],\n    };\n  },\n\n  loop({ props, state, device }) {\n    if (props.paused) {\n      return state;\n    }\n\n    const { inputs } = device;\n\n    let { birdGravity, birdY, pipes } = state;\n\n    birdGravity += 0.8;\n    birdY -= birdGravity;\n\n    if (\n      inputs.pointer.justPressed ||\n      (isWebInput(inputs) && inputs.keysJustPressed[" "])\n    ) {\n      birdGravity = -12;\n    }\n\n    const lastPipe = pipes[pipes.length - 1];\n    if (lastPipe.x < 140) {\n      pipes = [...pipes, newPipe(device)]\n        // Remove the pipes off screen on left\n        .filter(\n          (pipe) =>\n            pipe.x > -(device.size.width + device.size.widthMargin + pipeWidth)\n        );\n    }\n\n    if (didHitPipe(birdY, device.size, pipes)) {\n      props.gameOver();\n    }\n\n    // Move pipes to the left\n    pipes = pipes.map((pipe) => {\n      let passed = pipe.passed;\n      if (!passed && pipe.x < birdX - birdWidth / 2 - pipeWidth / 2) {\n        // Mark pipe as having passed bird\'s x position\n        passed = true;\n      }\n      return { ...pipe, passed, x: pipe.x - speedX };\n    });\n\n    return {\n      birdGravity,\n      birdY,\n      pipes,\n    };\n  },\n\n  render({ state, device }) {\n    const { size } = device;\n    return [\n      t.rectangle({\n        color: "#add8e6",\n        width: size.width + size.widthMargin * 2,\n        height: size.height + size.heightMargin * 2,\n      }),\n      Bird({\n        id: "bird",\n        position: {\n          x: birdX,\n          y: state.birdY,\n          rotation: Math.max(-30, state.birdGravity * 3 - 30),\n        },\n      }),\n      ...state.pipes.map((pipe, index) =>\n        Pipe({\n          id: `pipe-${index}`,\n          pipe,\n          position: { x: pipe.x, y: 0 },\n        })\n      ),\n    ];\n  },\n});\n\nfunction newPipe(device: Device<{}>): PipeT {\n  const height = device.size.height + device.size.heightMargin * 2;\n  const randomY = (height - pipeGap * 2) * (device.random() - 0.5);\n\n  return {\n    x: device.size.width + device.size.widthMargin + 50,\n    gapY: randomY,\n    passed: false,\n  };\n}\n\nfunction didHitPipe(birdY: number, size: DeviceSize, pipes: PipeT[]) {\n  if (\n    birdY - birdHeight / 2 < -(size.height / 2 + size.heightMargin) ||\n    birdY + birdHeight / 2 > size.height / 2 + size.heightMargin\n  ) {\n    // hit bottom or top\n    return true;\n  }\n  for (const pipe of pipes) {\n    if (\n      pipe.x > birdX + birdWidth / 2 + pipeWidth / 2 ||\n      pipe.x < birdX - birdWidth / 2 - pipeWidth / 2\n    ) {\n      // bird isn\'t at pipe\n      continue;\n    }\n    const {\n      yUpperTop,\n      yUpperBottom,\n      yLowerTop,\n      yLowerBottom,\n    } = getPipeYPositions(size, pipe.gapY);\n    const topPipeRect = {\n      x: pipe.x,\n      y: (yUpperTop + yUpperBottom) / 2,\n      width: pipeWidth,\n      height: yUpperTop - yUpperBottom,\n    };\n    const bottomPipeRect = {\n      x: pipe.x,\n      y: (yLowerTop + yLowerBottom) / 2,\n      width: pipeWidth,\n      height: yLowerTop - yLowerBottom,\n    };\n    // Check a few points at edges of bird\n    const birdPoints = [\n      { x: birdX + birdWidth / 2, y: birdY + birdHeight / 2 },\n      { x: birdX + birdWidth / 2, y: birdY - birdHeight / 2 },\n      { x: birdX, y: birdY + birdHeight / 2 },\n      { x: birdX, y: birdY - birdHeight / 2 },\n      { x: birdX - birdWidth / 2, y: birdY + birdHeight / 2 },\n      { x: birdX - birdWidth / 2, y: birdY - birdHeight / 2 },\n    ];\n    if (\n      birdPoints.some(\n        (point) =>\n          pointInRect(point, topPipeRect) || pointInRect(point, bottomPipeRect)\n      )\n    ) {\n      // Bird hit a pipe!\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction pointInRect(\n  point: { x: number; y: number },\n  rect: { x: number; y: number; height: number; width: number }\n) {\n  return (\n    point.x > rect.x - rect.width / 2 &&\n    point.x < rect.x + rect.width / 2 &&\n    point.y > rect.y - rect.height / 2 &&\n    point.y < rect.y + rect.height / 2\n  );\n}\n',highlight:[1,4,6,13,23,27,60,61,62,"119-185"]},{file:"index.ts",code:'import { makeSprite, GameProps } from "@replay/core";\nimport { Level } from "./level";\nimport { Menu } from "./menu";\n\ntype GameState = {\n  view: "menu" | "level";\n  attempt: number;\n};\n\nexport const Game = makeSprite<GameProps, GameState>({\n  init() {\n    return { view: "menu", attempt: 0 };\n  },\n\n  render({ state, updateState }) {\n    const inMenuScreen = state.view === "menu";\n\n    return [\n      Level({\n        id: `level-${state.attempt}`,\n        paused: inMenuScreen,\n        gameOver: () => {\n          updateState((prevState) => {\n            return {\n              ...prevState,\n              view: "menu",\n            };\n          });\n        },\n      }),\n      inMenuScreen\n        ? Menu({\n            id: "menu",\n            start: () => {\n              updateState((prevState) => {\n                return {\n                  ...prevState,\n                  view: "level",\n                  attempt: prevState.attempt + 1,\n                };\n              });\n            },\n          })\n        : null,\n    ];\n  },\n});\n\nexport const gameProps: GameProps = {\n  id: "Game",\n  size: {\n    width: 400,\n    height: 600,\n    maxHeightMargin: 150,\n  },\n  defaultFont: {\n    name: "Helvetica",\n    size: 24,\n  },\n};\n',highlight:[7,12,20,"22-29",39]}],codesJs:[{file:"level.js",code:'import { makeSprite, t } from "@replay/core";\nimport { Bird, birdWidth, birdHeight } from "./bird";\nimport { isWebInput } from "./utils";\nimport { Pipe, pipeWidth, pipeGap, getPipeYPositions } from "./pipe";\n\nconst speedX = 2;\nconst birdX = 0;\n\nexport const Level = makeSprite({\n  init({ device, props }) {\n    return {\n      birdY: 10,\n      birdGravity: -12,\n      pipes: props.paused ? [] : [newPipe(device)],\n    };\n  },\n\n  loop({ props, state, device }) {\n    if (props.paused) {\n      return state;\n    }\n\n    const { inputs } = device;\n\n    let { birdGravity, birdY, pipes } = state;\n\n    birdGravity += 0.8;\n    birdY -= birdGravity;\n\n    if (\n      inputs.pointer.justPressed ||\n      (isWebInput(inputs) && inputs.keysJustPressed[" "])\n    ) {\n      birdGravity = -12;\n    }\n\n    const lastPipe = pipes[pipes.length - 1];\n    if (lastPipe.x < 140) {\n      pipes = [...pipes, newPipe(device)]\n        // Remove the pipes off screen on left\n        .filter(\n          (pipe) =>\n            pipe.x > -(device.size.width + device.size.widthMargin + pipeWidth)\n        );\n    }\n\n    if (didHitPipe(birdY, device.size, pipes)) {\n      props.gameOver();\n    }\n\n    // Move pipes to the left\n    pipes = pipes.map((pipe) => {\n      let passed = pipe.passed;\n      if (!passed && pipe.x < birdX - birdWidth / 2 - pipeWidth / 2) {\n        // Mark pipe as having passed bird\'s x position\n        passed = true;\n      }\n      return { ...pipe, passed, x: pipe.x - speedX };\n    });\n\n    return {\n      birdGravity,\n      birdY,\n      pipes,\n    };\n  },\n\n  render({ state, device }) {\n    const { size } = device;\n    return [\n      t.rectangle({\n        color: "#add8e6",\n        width: size.width + size.widthMargin * 2,\n        height: size.height + size.heightMargin * 2,\n      }),\n      Bird({\n        id: "bird",\n        position: {\n          x: birdX,\n          y: state.birdY,\n          rotation: Math.max(-30, state.birdGravity * 3 - 30),\n        },\n      }),\n      ...state.pipes.map((pipe, index) =>\n        Pipe({\n          id: `pipe-${index}`,\n          pipe,\n          position: { x: pipe.x, y: 0 },\n        })\n      ),\n    ];\n  },\n});\n\nfunction newPipe(device) {\n  const height = device.size.height + device.size.heightMargin * 2;\n  const randomY = (height - pipeGap * 2) * (device.random() - 0.5);\n\n  return {\n    x: device.size.width + device.size.widthMargin + 50,\n    gapY: randomY,\n    passed: false,\n  };\n}\n\nfunction didHitPipe(birdY, size, pipes) {\n  if (\n    birdY - birdHeight / 2 < -(size.height / 2 + size.heightMargin) ||\n    birdY + birdHeight / 2 > size.height / 2 + size.heightMargin\n  ) {\n    // hit bottom or top\n    return true;\n  }\n  for (const pipe of pipes) {\n    if (\n      pipe.x > birdX + birdWidth / 2 + pipeWidth / 2 ||\n      pipe.x < birdX - birdWidth / 2 - pipeWidth / 2\n    ) {\n      // bird isn\'t at pipe\n      continue;\n    }\n    const {\n      yUpperTop,\n      yUpperBottom,\n      yLowerTop,\n      yLowerBottom,\n    } = getPipeYPositions(size, pipe.gapY);\n    const topPipeRect = {\n      x: pipe.x,\n      y: (yUpperTop + yUpperBottom) / 2,\n      width: pipeWidth,\n      height: yUpperTop - yUpperBottom,\n    };\n    const bottomPipeRect = {\n      x: pipe.x,\n      y: (yLowerTop + yLowerBottom) / 2,\n      width: pipeWidth,\n      height: yLowerTop - yLowerBottom,\n    };\n    // Check a few points at edges of bird\n    const birdPoints = [\n      { x: birdX + birdWidth / 2, y: birdY + birdHeight / 2 },\n      { x: birdX + birdWidth / 2, y: birdY - birdHeight / 2 },\n      { x: birdX, y: birdY + birdHeight / 2 },\n      { x: birdX, y: birdY - birdHeight / 2 },\n      { x: birdX - birdWidth / 2, y: birdY + birdHeight / 2 },\n      { x: birdX - birdWidth / 2, y: birdY - birdHeight / 2 },\n    ];\n    if (\n      birdPoints.some(\n        (point) =>\n          pointInRect(point, topPipeRect) || pointInRect(point, bottomPipeRect)\n      )\n    ) {\n      // Bird hit a pipe!\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction pointInRect(point, rect) {\n  return (\n    point.x > rect.x - rect.width / 2 &&\n    point.x < rect.x + rect.width / 2 &&\n    point.y > rect.y - rect.height / 2 &&\n    point.y < rect.y + rect.height / 2\n  );\n}\n',highlight:[2,4,10,14,"47-49","106-169"]},{file:"index.js",code:'import { makeSprite } from "@replay/core";\nimport { Level } from "./level";\nimport { Menu } from "./menu";\n\nexport const Game = makeSprite({\n  init() {\n    return { view: "menu", attempt: 0 };\n  },\n\n  render({ state, updateState }) {\n    const inMenuScreen = state.view === "menu";\n\n    return [\n      Level({\n        id: `level-${state.attempt}`,\n        paused: inMenuScreen,\n        gameOver: () => {\n          updateState((prevState) => {\n            return {\n              ...prevState,\n              view: "menu",\n            };\n          });\n        },\n      }),\n      inMenuScreen\n        ? Menu({\n            id: "menu",\n            start: () => {\n              updateState((prevState) => {\n                return {\n                  ...prevState,\n                  view: "level",\n                  attempt: prevState.attempt + 1,\n                };\n              });\n            },\n          })\n        : null,\n    ];\n  },\n});\n\nexport const gameProps = {\n  id: "Game",\n  size: {\n    width: 400,\n    height: 600,\n    maxHeightMargin: 150,\n  },\n  defaultFont: {\n    name: "Helvetica",\n    size: 24,\n  },\n};\n',highlight:[7,15,"17-24",34]}],Game:f,gameProps:v})}},217:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return r}));const i={text:e=>({type:"text",props:e}),circle:e=>({type:"circle",props:e}),rectangle:e=>({type:"rectangle",props:e}),line:e=>({type:"line",props:e}),image:e=>({type:"image",props:e}),spriteSheet:e=>({type:"spriteSheet",props:e})};function r(e){return t=>({type:"custom",spriteObj:e,props:t})}},219:function(e,t,n){"use strict";n.d(t,"a",(function(){return I}));var i=n(0),r=n.n(i),o=n(224),a=n(221),s=n(231),p=n(1),d=(n(226),n(227),n(80),n(232),n(225),n(78),n(233),n(79),n(228),n(230)),c=n(229),l=n(223),h=n(222),u=n(220),m=n.n(u),g=n(132),f=n.n(g);function v(e){var t=e.codesTs,n=e.codesJs;return r.a.createElement(l.a,{defaultValue:"js",groupId:"code",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}]},r.a.createElement(h.a,{value:"js"},r.a.createElement(b,{lang:"js",codes:n})),r.a.createElement(h.a,{value:"ts"},r.a.createElement(b,{lang:"ts",codes:t})))}function b(e){var t=e.lang,n=e.codes,o=n.map((function(e){return e.file})),a=Object(i.useState)(o[0]),s=a[0],p=a[1],d=n.find((function(e){return e.file===s}));return r.a.createElement("div",{style:{marginTop:-12}},r.a.createElement("div",{style:{position:"sticky",top:0,backgroundColor:"white",zIndex:1}},o.map((function(e){return r.a.createElement("button",{className:f.a.fileButton+(s===e?" "+f.a.fileButtonSelected:""),key:e,onClick:function(){return p(e)}},e)}))),r.a.createElement(y,{key:d.file,lang:t,code:d.code,highlight:d.highlight}))}function y(e){var t=e.lang,n=e.code,i=e.highlight,o=n.replace("/img/bird.png","bird.png").replace("/audio/boop.wav","boop.wav");return r.a.createElement(d.a,Object(p.a)({},d.b,{theme:c.a,code:o,language:t}),(function(e){var t=e.className,n=e.style,o=e.tokens,a=e.getLineProps,s=e.getTokenProps;return r.a.createElement("div",{className:f.a.codeBlockContent},r.a.createElement("div",{tabIndex:"0",className:m()(t,f.a.codeBlock)},r.a.createElement("div",{className:f.a.codeBlockLines,style:n},o.map((function(e,t){1===e.length&&""===e[0].content&&(e[0].content="\n");var n=a({line:e,key:t}),o=null==i?void 0:i.flatMap((function(e){if("number"==typeof e)return e;var t=e.split("-").map(Number),n=t[0],i=t[1];return Array.from({length:i-n+1}).map((function(e,t){return t+n}))}));return(null==o?void 0:o.includes(t+1))&&(n.className+=" docusaurus-highlight-code-line"),r.a.createElement("div",n,r.a.createElement("span",{style:{display:"inline-block",width:30,textAlign:"right",marginRight:16,opacity:.5,userSelect:"none"}},t+1),e.map((function(e,t){return r.a.createElement("span",s({token:e,key:t}))})))})))))}))}n(25);function w(e,t,n,i,r,o){const a=P(t.position),s=e.getSprites(t,n,a,i,r,o),p=[],d=s.filter(M).map(t=>{const i={...t,props:{...t.props,position:S(a,t.props.position)}};if("custom"===i.type){p.push(i.props.id);let t=!1;return e.childContainers[i.props.id]||(t=!0,e.childContainers[i.props.id]=x(i,n,e.prevTime)),w(e.childContainers[i.props.id],i.props,n,t,r,o)}return[i]});return Object.keys(e.childContainers).forEach(t=>{p.includes(t)||delete e.childContainers[t]}),d.reduce((e,t)=>e.concat(t),[])}function x(e,t,n){const{spriteObj:i,props:r}=e,o=t(r.position),a=[],s=e=>{a.push(e)};let p;return i.init&&(p=i.init({props:r,device:o,updateState:s})),{state:p,childContainers:{},prevTime:n,currentLag:0,getSprites(e,t,n,r,o,p){const d=p-this.prevTime;this.prevTime=p,this.currentLag+=d;const c=t(n);let l=0;if(this.state=a.reduce((e,t)=>t(e),this.state),a.length=0,!r&&i.loop){for(;this.currentLag>=1/60*1e3;)this.state=i.loop({props:e,state:this.state,device:c,updateState:s}),this.currentLag-=1/60*1e3;l=this.currentLag/(1/60*1e3)}let h=i[o];h||(h="renderPXL"===o&&i.renderXL?i.renderXL:i.render);const u=h({props:e,state:this.state,device:c,updateState:s,extrapolateFactor:l});return this.state=a.reduce((e,t)=>t(e),this.state),a.length=0,u}}}function E(e,t){const n=e.deviceHeight>e.deviceWidth;let i,r=!1;return"portrait"in t?(i=n?t.portrait:t.landscape,r=!0):i=t,i.minHeightXL&&e.deviceHeight>=i.minHeightXL||i.minWidthXL&&e.deviceWidth>=i.minWidthXL?r&&n?"renderPXL":"renderXL":r&&n?"renderP":"render"}function M(e){return null!==e}function P(e){return e?{...e,rotation:e.rotation||0}:{x:0,y:0,rotation:0}}function S(e,t){if(!t)return e;const{x:n,y:i,rotation:r}=P(t),o=Math.PI/180,a=-e.rotation*o;return{x:Math.round(e.x+n*Math.cos(a)-i*Math.sin(a))||0,y:Math.round(e.y+n*Math.sin(a)+i*Math.cos(a))||0,rotation:e.rotation+r}}let j={keysDown:{},keysJustPressed:{},pointer:{pressed:!1,justPressed:!1,justReleased:!1,x:0,y:0}};function L(e){if(!e)return j;const t=e.x,n=e.y,{x:i,y:r}=j.pointer,o=Math.PI/180,a=-(e.rotation||0)*o;return{...j,pointer:{...j.pointer,x:(i-t)*Math.cos(a)+(r-n)*Math.sin(a),y:-(i-t)*Math.sin(a)+(r-n)*Math.cos(a)}}}function O(e){["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"," "].includes(e.key)&&e.preventDefault(),j.keysDown[e.key]=!0,j.keysJustPressed[e.key]=!0}function k(e){delete j.keysDown[e.key]}const z=Math.PI/180,Y=(e,t)=>({circle(n,i){e.save();const r=n*t.anchorX,o=n*t.anchorY;e.translate(t.x,t.y),e.rotate(t.rotation*z),e.scale(t.scaleX,t.scaleY),e.translate(-r,o),e.beginPath(),e.arc(0,0,Math.round(n),0,2*Math.PI),e.globalAlpha=t.opacity,e.fillStyle=i,e.fill(),e.closePath(),e.restore()},rectangle(n,i,r){e.save();const o=n/2*t.anchorX,a=i/2*t.anchorY;e.translate(t.x,t.y),e.rotate(t.rotation*z),e.scale(t.scaleX,t.scaleY),e.translate(-o,a),e.globalAlpha=t.opacity,e.fillStyle=r,e.fillRect(-n/2,-i/2,n,i),e.closePath(),e.restore()},line(n,i,r){if(n.length<2)return;e.save();const[[o,a],...s]=n,{width:p,height:d}=function(e){if(e.length<2)return{width:0,height:0};let t=Number.MAX_SAFE_INTEGER,n=-Number.MAX_SAFE_INTEGER,i=Number.MAX_SAFE_INTEGER,r=-Number.MAX_SAFE_INTEGER;return e.forEach(([e,o])=>{e>n&&(n=e),e<t&&(t=e),o>r&&(r=o),o<i&&(i=o)}),{width:n-t,height:r-i}}(n),c=p/2*t.anchorX,l=d/2*t.anchorY;e.translate(t.x,t.y),e.rotate(t.rotation*z),e.scale(t.scaleX,t.scaleY),e.translate(-c,l),e.globalAlpha=t.opacity,e.strokeStyle=r,e.lineWidth=i,e.beginPath(),e.moveTo(o,-a),s.forEach(([t,n])=>{e.lineTo(t,-n)}),e.stroke(),e.restore()},text(n,i,r){e.save();const o=`${n.size}px ${n.name}`;e.font=o,e.textBaseline="middle",e.textAlign="center";const{width:a}=e.measureText(i),s=n.size,p=a/2*t.anchorX,d=s/2*t.anchorY;e.translate(t.x,t.y),e.rotate(t.rotation*z),e.scale(t.scaleX,t.scaleY),e.translate(-p,d),e.font=o,e.textBaseline="middle",e.textAlign="center",e.globalAlpha=t.opacity,e.fillStyle=r,e.fillText(i,0,0),e.restore()},image(n,i,r){e.save();const o=i/2*t.anchorX,a=r/2*t.anchorY;e.translate(t.x,t.y),e.rotate(t.rotation*z),e.scale(t.scaleX,t.scaleY),e.translate(-o,a),e.globalAlpha=t.opacity,e.drawImage(n,-i/2,-r/2,i,r),e.restore()},spriteSheet(n,i,r,o,a,s){e.save();const p=a/2*t.anchorX,d=s/2*t.anchorY;e.translate(t.x,t.y),e.rotate(t.rotation*z),e.scale(t.scaleX,t.scaleY),e.translate(-p,d),e.globalAlpha=t.opacity;const c=n.width/i,l=n.height/r,h=o%i,u=Math.floor(o/i)%r;e.drawImage(n,h*c,u*l,c,l,-a/2,-s/2,a,s),e.restore()}});let T;function X(e,t,n,i){let r;if("portrait"in i){r=t>e?i.portrait:i.landscape}else r=i;const{width:o,height:a,maxWidthMargin:s=0,maxHeightMargin:p=0}=r;if("game-coords"===n)return{width:o,height:a,widthMargin:0,heightMargin:0,deviceWidth:o,deviceHeight:a};const d=o/a;if(d>e/t){const n=e,i=n/d,r=i/a*p,s=Math.min(t,i+2*r);return{width:o,height:a,widthMargin:0,heightMargin:(s-i)/2*(a/i),deviceWidth:n,deviceHeight:s}}{const n=t,i=n*d,r=i/o*s,p=Math.min(e,i+2*r);return{width:o,height:a,widthMargin:(p-i)/2*(o/i),heightMargin:0,deviceWidth:p,deviceHeight:n}}}const W={name:"sans-serif",size:12};function G(e,t=[],n={},i="game-coords",r,o){var a;const s=r||document.createElement("canvas");r||document.body.appendChild(s);const p=s.getContext("2d",{alpha:!1});let d=!0;let c,l,h,u,m;function g(t){if(c&&(p.restore(),document.removeEventListener("pointerdown",l),document.removeEventListener("pointermove",h),document.removeEventListener("pointerup",u),!0===t))return;const n=function(e,t,n,i){const r=X(e,t,n,i);return T=r,r}((null==o?void 0:o.width)||window.innerWidth,(null==o?void 0:o.height)||window.innerHeight,i,e.props.size);s.width=n.deviceWidth,s.height=n.deviceHeight;const r=e.props.defaultFont||W,a=function(e,{width:t,height:n,widthMargin:i,heightMargin:r,deviceWidth:o,deviceHeight:a},s,p){e.save();const d=Math.min(o/t,a/n),c=t+2*i,l=n+2*r;return e.translate(o/2,a/2),e.scale(d,d),{scale:d,render:t=>{e.clearRect(-o/2/d,-a/2/d,o/d,a/d),e.fillStyle="white",e.fillRect(-c/2,-l/2,c,l),t.forEach(t=>{var n,i,r;const o=t.props.position||{x:0,y:0};(function(e,t,n,i){switch(e.type){case"text":return()=>t.text(e.props.font||i,e.props.text,e.props.color);case"circle":return()=>t.circle(e.props.radius,e.props.color);case"rectangle":return()=>t.rectangle(e.props.width,e.props.height,e.props.color);case"line":return()=>t.line(e.props.path,e.props.thickness,e.props.color);case"image":return()=>t.image(n[e.props.fileName],e.props.width,e.props.height);case"spriteSheet":return()=>t.spriteSheet(n[e.props.fileName],e.props.columns,e.props.rows,e.props.index,e.props.width,e.props.height)}})(t,Y(e,{x:o.x,y:-o.y,rotation:o.rotation||0,opacity:null!==(n=t.props.opacity)&&void 0!==n?n:1,scaleX:null!==(i=t.props.scaleX)&&void 0!==i?i:1,scaleY:null!==(r=t.props.scaleY)&&void 0!==r?r:1,anchorX:t.props.anchorX||0,anchorY:t.props.anchorY||0}),s,p)()})}}}(p,n,v,r);m=a.scale,y.ref=a.render;const g=(({canvasOffsetLeft:e,widthMargin:t,scale:n,width:i})=>r=>(r.clientX-e)/n-t-i/2)({canvasOffsetLeft:s.offsetLeft,width:n.width,widthMargin:n.widthMargin,scale:m}),f=(({canvasOffsetTop:e,heightMargin:t,scale:n,height:i})=>r=>-(r.clientY-e)/n+t+i/2)({canvasOffsetTop:s.offsetTop,height:n.height,heightMargin:n.heightMargin,scale:m}),b=(e,t)=>e>n.width/2+n.widthMargin||e<-n.width/2-n.widthMargin||t>n.height/2+n.heightMargin||t<-n.height/2+n.heightMargin;l=e=>{const t=g(e),n=f(e);b(t,n)?d=!1:(d=!0,function(e,t){j.pointer={pressed:!0,justPressed:!0,justReleased:!1,x:e,y:t}}(t,n))},h=e=>{const t=g(e),n=f(e);b(t,n)||function(e,t){j.pointer.x=e,j.pointer.y=t}(t,n)},u=e=>{const t=g(e),n=f(e);b(t,n)||function(e,t){j.pointer.justPressed=!1,j.pointer.pressed=!1,j.pointer.justReleased=!0,j.pointer.x=e,j.pointer.y=t}(t,n)},document.addEventListener("pointerdown",l,!1),document.addEventListener("pointermove",h,!1),document.addEventListener("pointerup",u,!1),c=n}document.addEventListener("keydown",e=>{d&&O(e)},!1),document.addEventListener("keyup",e=>{d&&k(e)},!1),window.addEventListener("resize",g,!1);const f={},v={},b={getGetDevice:C(f,X((null==o?void 0:o.width)||window.innerWidth,(null==o?void 0:o.height)||window.innerHeight,i,e.props.size))},y={ref:null};g();const{initTextures:M,getNextFrameTextures:P}=function(e,t,n){const i=t||game.Game(game.gameProps),r=e.getGetDevice(),o=r(i.props.position),a=x(i,r,0),s=n||i.props.size,p=E(o.size,s);return{initTextures:w(a,i.props,r,!0,p,0),getNextFrameTextures(t){const n=e.getGetDevice(),r=E(n(i.props.position).size,s);return w(a,i.props,n,!1,r,t)}}}(b,e);let S=null,L=!1;function z(e){var t;null===(t=y.ref)||void 0===t||t.call(y,e),window.requestAnimationFrame(e=>{L||(null===S&&(S=e-1/60),z(P(e-S)),j={keysDown:j.keysDown,keysJustPressed:{},pointer:{...j.pointer,justPressed:!1,justReleased:!1}})})}return null===(a=y.ref)||void 0===a||a.call(y,t),{cleanup:function(){s.width=s.width,r||document.body.removeChild(s),L=!0,document.removeEventListener("keydown",O,!1),document.removeEventListener("keyup",k,!1),window.removeEventListener("resize",g,!1),g(!0)},loadPromise:(async()=>{const e=[];(n.audioFileNames||[]).forEach(t=>{f[t]=new Audio(t),e.push(new Promise((e,n)=>{f[t].addEventListener("canplaythrough",e),f[t].addEventListener("error",n)})),f[t].load()}),(n.imageFileNames||[]).forEach(t=>{v[t]=new Image,e.push(new Promise((e,n)=>{v[t].addEventListener("load",e),v[t].addEventListener("error",n),v[t].src=t}))}),await Promise.all(e)})().then(()=>{const e=()=>{document.removeEventListener("keydown",e,!1),document.removeEventListener("pointerdown",e,!1),Object.values(f).forEach(e=>{e.muted=!0,e.play().then(()=>{e.pause(),e.muted=!1})})};document.addEventListener("keydown",e,!1),document.addEventListener("pointerdown",e,!1),z(M)}),audioElements:f}}function C(e,t){const n={log:console.log,random:Math.random,timeout:(e,t)=>setTimeout(e,t),audio:t=>{function n(n){let i=e[t];if(!i)throw Error("Cannot find audio file "+t);return n&&i.currentTime>0&&i.currentTime<i.duration&&(i=new Audio(t)),i}return{getPosition:()=>n(!1).currentTime,play:(e,t)=>{const i=n(!0);i.play(),e&&(i.currentTime=e),t&&(i.loop=!0)},pause:()=>{n(!1).pause()}}},network:{get:(e,t)=>{fetch(e).then(e=>e.json()).then(t)},post:(e,t,n)=>{fetch(e,{method:"POST",body:JSON.stringify(t)}).then(e=>e.json()).then(n)},put:(e,t,n)=>{fetch(e,{method:"PUT",body:JSON.stringify(t)}).then(e=>e.json()).then(n)},delete:(e,t)=>{fetch(e,{method:"DELETE"}).then(e=>e.json()).then(t)}},storage:{getStore:()=>{var e;const t={};for(let n=0;n<localStorage.length;n++){const i=localStorage.key(n);i&&(t[i]=null!==(e=localStorage.getItem(i))&&void 0!==e?e:void 0)}return t},setStore:e=>{Object.entries(e).forEach(([e,t])=>{void 0===t?localStorage.removeItem(e):localStorage.setItem(e,t)})}}};return()=>{const e={...n,size:T||t,now:()=>new Date};return t=>({...e,inputs:L(t)})}}var H=n(217);function N(e){var t=e.Game,n=e.gameProps,o=e.showReload,a=e.assets,s=function(){var e=Object(i.useRef)(null),t=Object(i.useState)(null),n=t[0],r=t[1],o=function(){r(e.current.getBoundingClientRect())};Object(i.useEffect)((function(){return window.addEventListener("resize",o,!1),function(){return window.removeEventListener("resize",o,!1)}}),[]);var a=Object(i.useCallback)((function(t){null!==t&&(e.current=t,o())}),[]);return Object(i.useEffect)((function(){document.getElementById("iphone-img").onload=function(){o()}}),[]),[n,a]}(),p=s[0],d=s[1],c=Object(i.useState)(0),l=c[0],h=c[1],u=0,m=0,g=0;if(p&&p.height&&p.width){p.width/p.height>375/667?(m=p.height*(667/900),u=m*(375/667)):(u=p.width*(375/460),m=u/(375/667));var v=n.size.maxHeightMargin?0:.08*m;g=(p.height-m)/2+v}return Object(i.useEffect)((function(){if(u&&m){var e=document.getElementById("myCanvas"),i=G(t(n),[H.b.text({color:"black",text:"Loading..."})],a,"scale-up",e,{width:u,height:m}).cleanup;return function(){i()}}}),[u,m,l]),r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{ref:d,style:{height:"100%",width:"100%",display:"flex",justifyContent:"center"}},r.a.createElement("img",{id:"iphone-img",style:{userSelect:"none",objectFit:"contain",maxHeight:"100%"},src:"/img/iPhone8-Portrait-SpaceGray.png"})),o&&r.a.createElement("img",{className:f.a.refresh,src:"/img/reload.svg",width:20,height:20,onClick:function(){return h((function(e){return e+1}))}}),r.a.createElement("canvas",{id:"myCanvas",style:{position:"absolute",marginTop:g},width:u,height:m}))}function I(e){var t=e.part,n=e.MDXContent,i=e.codesTs,p=e.codesJs,d=e.Game,c=e.gameProps,l=e.image,h=e.isEnd,u=e.assets,m=i&&p,g=d&&c?r.a.createElement(s.a,{fallback:r.a.createElement("div",null,"Preview")},(function(){return r.a.createElement(N,{Game:d,gameProps:c,showReload:m,assets:u})})):r.a.createElement("div",null,r.a.createElement("img",{src:l}));return r.a.createElement(o.a,{title:"Tutorial - Part "+t,noFooter:!0},r.a.createElement("div",{style:{display:"flex",minWidth:1024,height:"calc(100vh - 60px)"}},r.a.createElement("div",{style:{flex:"1",overflow:"auto",padding:16,borderRight:"1px solid #ededed"}},r.a.createElement(n,null),r.a.createElement("div",{style:{display:"flex",justifyContent:"space-between"}},t>1?r.a.createElement(a.a,{to:"/tutorial/"+(t-1)},"Back"):r.a.createElement("div",null),h?r.a.createElement("div",null):r.a.createElement(a.a,{to:"/tutorial/"+(t+1)},"Next"))),m?r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{style:{flex:"1",overflow:"auto",borderRight:"1px solid #ededed"}},r.a.createElement(v,{codesTs:i,codesJs:p})),r.a.createElement("div",{style:{flex:"1",display:"flex",justifyContent:"center"}},g)):r.a.createElement("div",{style:{flex:"2",display:"flex",justifyContent:"center"}},g)))}},235:function(e,t,n){"use strict";function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function r(e){var t=0;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e)))return function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(t=e[Symbol.iterator]()).next.bind(t)}n.d(t,"a",(function(){return r}))}}]);