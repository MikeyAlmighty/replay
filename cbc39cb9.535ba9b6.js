(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{190:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return u}));var i=n(1),r=n(9),a=(n(0),n(221)),o={id:"text-input",title:"TextInput"},l={id:"text-input",title:"TextInput",description:"To add a text input to your game, use the `@replay/text-input` package and [ReplayTextInput](https://github.com/edbentley/replay-text-input-swift) Swift package.",source:"@site/docs/text-input.md",permalink:"/docs/text-input",editUrl:"https://github.com/edbentley/replay/edit/master/website/docs/text-input.md",sidebar:"someSidebar",previous:{title:"Native Sprites",permalink:"/docs/native-sprites"}},p=[],c={rightToc:p};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To add a text input to your game, use the ",Object(a.b)("inlineCode",{parentName:"p"},"@replay/text-input")," package and ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/edbentley/replay-text-input-swift"}),"ReplayTextInput")," Swift package."),Object(a.b)("h4",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js",metastring:'title="my-sprite.js"',title:'"my-sprite.js"'}),'import { TextInput } from "@replay/text-input";\n\nconst MySprite = makeSprite({\n  render({ state }) {\n    return [\n      TextInput({\n        id: "MyInput",\n        fontName: "Calibri",\n        fontSize: 20,\n        // We control the text in the input through our state.text field\n        text: state.text,\n        onChangeText: (text) => {\n          // Update our state.text field with new value when typing occurs\n          updateState((s) => ({ ...s, text }));\n        },\n        width: 100,\n      }),\n    ];\n  },\n});\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js",metastring:'{1,4} title="web/index.js"',"{1,4}":!0,title:'"web/index.js"'}),'import { TextInputWeb } from "@replay/text-input";\n\nrenderCanvas(Game(gameProps), loadingTextures, ASSET_NAMES, "scale-up", {\n  TextInput: TextInputWeb,\n});\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift",metastring:'{2,10,11} title="SceneDelegate.swift"',"{2,10,11}":!0,title:'"SceneDelegate.swift"'}),'import Replay\nimport ReplayTextInput\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        if let windowScene = scene as? UIWindowScene {\n            let window = UIWindow(windowScene: windowScene)\n\n            let nativeSpriteMap = ["TextInput": ReplayTextInputSwift()]\n            window.rootViewController = ReplayViewController(nativeSpriteMap: nativeSpriteMap)\n\n            self.window = window\n            window.makeKeyAndVisible()\n        }\n    }\n\n}\n')),Object(a.b)("h4",{id:"props"},"Props"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"id"),": (Required) Identifier, must be unique within a single render function."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fontName"),": (Required) Name of the font to use."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fontSize"),": (Required) Size of the font in game coordinates."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"text"),": (Required) The text to show in the input. Users typing will trigger ",Object(a.b)("inlineCode",{parentName:"li"},"onChangeText")," but will not automatically change the text shown in the input."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"onChangeText"),": (Required) A callback with the updated text value when the player types."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"width"),": (Required) Width of the text input in game coordinates."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"numberOfLines"),": Number of lines text input shows. You should not switch between single and multi-line for the same text input. Default ",Object(a.b)("inlineCode",{parentName:"li"},"1"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"align"),": Alignment of text in input field, can be ",Object(a.b)("inlineCode",{parentName:"li"},'"left"'),", ",Object(a.b)("inlineCode",{parentName:"li"},'"right"')," or ",Object(a.b)("inlineCode",{parentName:"li"},'"center"'),". Default ",Object(a.b)("inlineCode",{parentName:"li"},'"center"'),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"x"),": x coordinate of input. Default ",Object(a.b)("inlineCode",{parentName:"li"},"0"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"y"),": y coordinate of input. Default ",Object(a.b)("inlineCode",{parentName:"li"},"0"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"color"),": An RGB hex value (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},'"#ff0000"'),") or ",Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/docs/Web/CSS/color_value"}),"CSS Level 1 keyword")," (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},'"green"'),"). Default ",Object(a.b)("inlineCode",{parentName:"li"},'"black"'),".")))}u.isMDXComponent=!0},221:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),b=u(n),d=i,m=b["".concat(o,".").concat(d)]||b[d]||s[d]||a;return n?r.a.createElement(m,l({ref:t},c,{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);