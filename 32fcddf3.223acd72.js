(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{141:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),u=r,f=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return n?a.a.createElement(f,c(c({ref:t},p),{},{components:n})):a.a.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(2),a=n(6),o=(n(0),n(141)),i={id:"ios",title:"iOS"},c={unversionedId:"ios",id:"ios",isDocsHomePage:!1,title:"iOS",description:"Swift Package",source:"@site/docs/ios.md",permalink:"/docs/ios",editUrl:"https://github.com/edbentley/replay/edit/master/website/docs/ios.md",sidebar:"someSidebar",previous:{title:"Web",permalink:"/docs/web"},next:{title:"Native Sprites",permalink:"/docs/native-sprites"}},l=[{value:"Swift Package",id:"swift-package",children:[{value:"<code>ReplayViewController(hideStatusBar, useLocalHost)</code>",id:"replayviewcontrollerhidestatusbar-uselocalhost",children:[]}]},{value:"Inputs",id:"inputs",children:[]}],p={rightToc:l};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"swift-package"},"Swift Package"),Object(o.b)("p",null,"The Replay Swift package is ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/edbentley/replay-swift"}),"hosted on GitHub"),". Once ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app"}),"added as a package dependency")," to your Xcode project, you can replace the ",Object(o.b)("inlineCode",{parentName:"p"},"rootViewController"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift",metastring:"{1,8}","{1,8}":!0}),"import Replay\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        if let windowScene = scene as? UIWindowScene {\n            let window = UIWindow(windowScene: windowScene)\n            window.rootViewController = ReplayViewController()\n            self.window = window\n            window.makeKeyAndVisible()\n        }\n    }\n\n}\n")),Object(o.b)("p",null,"Your image and audio assets also need to be added to your Xcode project. See ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/starter"}),"Replay Starter")," for an example setup."),Object(o.b)("h3",{id:"replayviewcontrollerhidestatusbar-uselocalhost"},Object(o.b)("inlineCode",{parentName:"h3"},"ReplayViewController(hideStatusBar, useLocalHost)")),Object(o.b)("h4",{id:"parameters"},"Parameters"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"hideStatusBar"),": (Optional) A boolean to set if the status bar is hidden or not. Default ",Object(o.b)("inlineCode",{parentName:"li"},"true"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"useLocalHost"),": (Optional) Set to ",Object(o.b)("inlineCode",{parentName:"li"},"true")," to debug JavaScript errors, but note that assets can't be loaded in this mode. Default ",Object(o.b)("inlineCode",{parentName:"li"},"false"),".")),Object(o.b)("h2",{id:"inputs"},"Inputs"),Object(o.b)("p",null,"Since Replay Swift embeds your game as a web view, the ",Object(o.b)("inlineCode",{parentName:"p"},"device.inputs")," parameter of Sprite methods is an alias of the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/web"}),"Web package"),"'s inputs:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"type iOSInputs = WebInputs;\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"@replay/swift")," package exports this type for TypeScript projects."))}s.isMDXComponent=!0}}]);